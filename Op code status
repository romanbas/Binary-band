op code status
000
036
01 - done phase 2 update (phase 1)
02 - done phase 2 update (phase 1)
03 - done phase 2 update (phase 1)
04 - done phase 2 update (phase 1)
05 - done phase 2 update (phase 1)
06 - done phase 2 update (phase 1)
07 - done phase 2 update (phase 1)
10
11
12
13
14
15
16
17
18
20 - done (phase 2)
21 - done (phase 2)
22 - done (phase 2)
23 - done (phase 2)
24 - done (phase 2)
25 - done (phase 2)
31 - done (phase 2)
32 - done (phase 2)
33 - wait until phase 4
34 - wait until phase 4
35 - wait until phase 4
36 - wait until phase 4
37 - wait until phase 4
41 - done phase 2 update (phase 1)
42 - done phase 2 update (phase 1)
50 - wait until phase 4
51 - wait until phase 4
61
62
63

        // op code 20 - multiply values at two registers
        // set cc code OVERFLOW if there is overflow
        public void MLT (int[] reg1, int[] reg2) {
            System.out.println("MLT");  
            int indexofR1 = reg1[0]+reg1[1]*2;
            int indexofR2 = reg2[0]+reg2[1]*2;
            int val1=0; int val2=0;
            if (indexofR1 == 0){val1 = getnegativedecimalvalue(cp.R0.data);}
            else if (indexofR1 == 2) {val1 = getnegativedecimalvalue(cp.R2.data);}
            if (indexofR2 == 0){val2 = getnegativedecimalvalue(cp.R0.data);}
            else if (indexofR2 == 2) {val2 = getnegativedecimalvalue(cp.R2.data);} 
            int product = val1 * val2;
            int resultReg1 [] = new int [16];
            int resultReg2 [] = new int [16];
            int[] result = getnegativeBinaryValue32(product);
            for (int i=0; i<16;i++){ resultReg1[i] = result[i]; }
            for (int i=16; i<32;i++){ resultReg2[i] = result[i]; }
            if (indexofR1 == 0){
                    //fill the first register with upper bits and second register with lower 16 bits
                    int res1 = getnegativedecimalvalue(resultReg1);
                    cp.R0.data = getnegativeBinaryValue(res1);
                    int res2 = getnegativedecimalvalue(resultReg2);
                    cp.R1.data = getnegativeBinaryValue(res2);                    
                }
            else if (indexofR1 == 2){
                    int res1 = getnegativedecimalvalue(resultReg1);
                    cp.R2.data = getnegativeBinaryValue(res1);
                    int res2 = getnegativedecimalvalue(resultReg2);
                    cp.R3.data = getnegativeBinaryValue(res2);                     
                } 
            //in case of overflow
            if (/*case1*/(val1 < 0 && val2 <0 && product < 0) || 
                    /*case2*/(val1<0 && val2>0 && product>0) || (val2<0 && val1>0 && product>0)
                    /*case3*/ || (val1 > 0 && val2 >0 && product < 0)) {
                cp.CC.data[0] = 1; // set overflow cc to 1;    
            }  else {
                cp.CC.data[0] = 0; // set overflow cc to 0 since no overflow
            }
        } //end of MLT method    
        
        // op code 21
        // divide register by register
        public void DVD (int[] reg1, int[] reg2){
            System.out.println("DVD");
            int val1=0; int val2=0;
            int indexofR1 = reg1[0]+reg1[1]*2;
            int indexofR2 = reg2[0]+reg2[1]*2;
            if (indexofR1 == 0){val1 = getnegativedecimalvalue(cp.R0.data);}
            else if (indexofR1 == 2) {val1 = getnegativedecimalvalue(cp.R2.data);}    
            if (indexofR2 == 0){val2 = getnegativedecimalvalue(cp.R0.data);}
            else if (indexofR2 == 2) {val2 = getnegativedecimalvalue(cp.R2.data);}  
            int quotient = val1 / val2; int remained = val1%val2;
            if(indexofR1 == 0){ cp.R0.data = getnegativeBinaryValue(quotient);
                                cp.R1.data = getnegativeBinaryValue(remained);}
            else if(indexofR1 == 2){ cp.R2.data = getnegativeBinaryValue(quotient);
                                     cp.R3.data = getnegativeBinaryValue(remained);}   
            if (val2 ==0){cp.CC.data[2] = 1;} // if dividing by zero set the DIVZERO condition code
            else {cp.CC.data[2] = 0;}
        } // end DVD
        
        
        // op code 22 - test equality of two registers
        // if value are equal, set CC code EQUALORNOT to 1
        public void TRR (int[] reg1, int[] reg2) {
            System.out.println("TRR");
            int val1=0; int val2=0;
            int indexofR1 = reg1[0]+reg1[1]*2;
            int indexofR2 = reg2[0]+reg2[1]*2;
            if (indexofR1 == 0){val1 = getnegativedecimalvalue(cp.R0.data);}
            else if (indexofR1 == 1) {val1 = getnegativedecimalvalue(cp.R1.data);}
            else if (indexofR1 == 2) {val1 = getnegativedecimalvalue(cp.R2.data);}
            else if (indexofR1 == 3) {val1 = getnegativedecimalvalue(cp.R3.data);}
            if (indexofR2 == 0){val2 = getnegativedecimalvalue(cp.R0.data);}
            else if (indexofR2 == 1) {val2 = getnegativedecimalvalue(cp.R1.data);}
            else if (indexofR2 == 2) {val2 = getnegativedecimalvalue(cp.R2.data);}
            else if (indexofR2 == 3) {val2 = getnegativedecimalvalue(cp.R3.data);}            
            if (val1 == val2) {cp.CC.data[3] = 1;}
            else {cp.CC.data[3] = 0;}
        } // end 

        // op code 23
        public void AND (int[] reg1, int[] reg2) {
            System.out.println("AND");
            int val1=0; int val2=0; int sum0 = 0; int sum1= 1;
            int indexofR1 = reg1[0]+reg1[1]*2;
            int indexofR2 = reg2[0]+reg2[1]*2;
            if (indexofR1 == 0){val1 = getnegativedecimalvalue(cp.R0.data);}
            else if (indexofR1 == 1) {val1 = getnegativedecimalvalue(cp.R1.data);}
            else if (indexofR1 == 2) {val1 = getnegativedecimalvalue(cp.R2.data);}
            else if (indexofR1 == 3) {val1 = getnegativedecimalvalue(cp.R3.data);}
            if (indexofR2 == 0){val2 = getnegativedecimalvalue(cp.R0.data);}
            else if (indexofR2 == 1) {val2 = getnegativedecimalvalue(cp.R1.data);}
            else if (indexofR2 == 2) {val2 = getnegativedecimalvalue(cp.R2.data);}
            else if (indexofR2 == 3) {val2 = getnegativedecimalvalue(cp.R3.data);}  
            //check for non zero values at both registers
            if (val1!=0 && val2!=0) {
                if(indexofR1 == 0)    cp.R0.data = getnegativeBinaryValue(sum1);
		else if(indexofR1==1) cp.R1.data = getnegativeBinaryValue(sum1);
		else if(indexofR1==2) cp.R2.data = getnegativeBinaryValue(sum1);
		else if(indexofR1==3) cp.R3.data = getnegativeBinaryValue(sum1);
            } else {
                if(indexofR1 == 0)    cp.R0.data = getnegativeBinaryValue(sum0);
		else if(indexofR1==1) cp.R1.data = getnegativeBinaryValue(sum0);
		else if(indexofR1==2) cp.R2.data = getnegativeBinaryValue(sum0);
		else if(indexofR1==3) cp.R3.data = getnegativeBinaryValue(sum0);                
            }
        } // end AND
        
        // op code 24
        public void ORR (int[] reg1, int[] reg2) {
            System.out.println("ORR");
            int val1=0; int val2=0; int sum0 = 0; int sum1= 1;
            int indexofR1 = reg1[0]+reg1[1]*2;
            int indexofR2 = reg2[0]+reg2[1]*2;
            if (indexofR1 == 0){val1 = getnegativedecimalvalue(cp.R0.data);}
            else if (indexofR1 == 1) {val1 = getnegativedecimalvalue(cp.R1.data);}
            else if (indexofR1 == 2) {val1 = getnegativedecimalvalue(cp.R2.data);}
            else if (indexofR1 == 3) {val1 = getnegativedecimalvalue(cp.R3.data);}
            if (indexofR2 == 0){val2 = getnegativedecimalvalue(cp.R0.data);}
            else if (indexofR2 == 1) {val2 = getnegativedecimalvalue(cp.R1.data);}
            else if (indexofR2 == 2) {val2 = getnegativedecimalvalue(cp.R2.data);}
            else if (indexofR2 == 3) {val2 = getnegativedecimalvalue(cp.R3.data);}  
            //check if values at both registers are equal to zero
            if (val1==0 && val2==0) {
                if(indexofR1 == 0)    cp.R0.data = getnegativeBinaryValue(sum0);
		else if(indexofR1==1) cp.R1.data = getnegativeBinaryValue(sum0);
		else if(indexofR1==2) cp.R2.data = getnegativeBinaryValue(sum0);
		else if(indexofR1==3) cp.R3.data = getnegativeBinaryValue(sum0);
            } else {
                if(indexofR1 == 0)    cp.R0.data = getnegativeBinaryValue(sum1);
		else if(indexofR1==1) cp.R1.data = getnegativeBinaryValue(sum1);
		else if(indexofR1==2) cp.R2.data = getnegativeBinaryValue(sum1);
		else if(indexofR1==3) cp.R3.data = getnegativeBinaryValue(sum1);                
            }
        } // end ORR
        
        //opo code 25, logical not of value at register
        public void NOT (){
            System.out.println("NOT");
            int val1=0; int sum0 = 0; int sum1 = 1;
            int indexofR = R[0]+R[1]*2;
            if (indexofR == 0){val1 = getnegativedecimalvalue(cp.R0.data);}
            else if (indexofR == 1) {val1 = getnegativedecimalvalue(cp.R1.data);}
            else if (indexofR == 2) {val1 = getnegativedecimalvalue(cp.R2.data);}
            else if (indexofR == 3) {val1 = getnegativedecimalvalue(cp.R3.data);}
            // if value at reg is zero, set reg = 1
            if (val1 == 0){
                if(indexofR == 0)    cp.R0.data = getnegativeBinaryValue(sum1);
		else if(indexofR==1) cp.R1.data = getnegativeBinaryValue(sum1);
		else if(indexofR==2) cp.R2.data = getnegativeBinaryValue(sum1);
		else if(indexofR==3) cp.R3.data = getnegativeBinaryValue(sum1);
            } else {
                // if value at reg is anything BUT zero, set reg = 0
                if(indexofR == 0)    cp.R0.data = getnegativeBinaryValue(sum0);
		else if(indexofR==1) cp.R1.data = getnegativeBinaryValue(sum0);
		else if(indexofR==2) cp.R2.data = getnegativeBinaryValue(sum0);
		else if(indexofR==3) cp.R3.data = getnegativeBinaryValue(sum0);
            }
        } // end NOT
        
        //opo code 31, shift register by count
        public void SRC (int[] reg, int[] count, int LR, int AL){
            System.out.println("SRC");
            int indexofR = R[0]+R[1]*2; int val1[]= new int [16]; 
            int valofCount = getnegativedecimalvalue(count); 
            if (indexofR == 0){val1 = cp.R0.data;}
            else if (indexofR == 1) {val1 = cp.R1.data;}
            else if (indexofR == 2) {val1 = cp.R2.data;}
            else if (indexofR == 3) {val1 = cp.R3.data;}
            //LR=0 and AL =0 -> right arithmetic shift
            if (LR==0 && AL==0){
                int temp = 0;
                for (int i=valofCount;i<=val1.length-1;i++){
                    temp = val1[i]; 
                    val1[i-valofCount] = temp;}
                for (int i=val1.length-valofCount; i<val1.length; i++){
                    if (val1[0]==0){val1[i]=0;}
                    else {val1[i]=1;}
                }
                if(indexofR == 0)    cp.R0.data = val1;
		else if(indexofR==1) cp.R1.data = val1;
		else if(indexofR==2) cp.R2.data = val1;
		else if(indexofR==3) cp.R3.data = val1;
            } // end of right arithmetic
            //LR=0 and AL =1 -> right logical shift
            else if (LR==0 && AL==1){
                int temp = 0;
                for (int i=valofCount;i<=val1.length-1;i++){
                    temp = val1[i]; 
                    val1[i-valofCount] = temp;}
                for (int i=val1.length-valofCount; i<val1.length; i++){
                    val1[i]=0;
                }
                if(indexofR == 0)    cp.R0.data = val1;
		else if(indexofR==1) cp.R1.data = val1;
		else if(indexofR==2) cp.R2.data = val1;
		else if(indexofR==3) cp.R3.data = val1;
            } // end of right logical
            //LR=1 & AL=0 || LR=1 & AL=1 -> left sift
            else if ((LR==1 && AL==0) || (LR==1 && AL==1)){
                int temp = 0;
                for (int i=val1.length-valofCount-1;i>=0;i--){
                    temp = val1[i]; 
                    val1[i+valofCount] = temp;}
                for (int i=0; i<valofCount; i++){
                    val1[i]=0; }
                if(indexofR == 0)    cp.R0.data = val1;
		else if(indexofR==1) cp.R1.data = val1;
		else if(indexofR==2) cp.R2.data = val1;
		else if(indexofR==3) cp.R3.data = val1;
            }
        } // end SRC
        
        //opo code 32, rotate register by count
        public void RRC (int[] reg, int[] count, int LR, int AL){
            System.out.println("RRC");
            int indexofR = R[0]+R[1]*2; int val1[]= new int [16]; 
            int valofCount = getnegativedecimalvalue(count); 
            if (indexofR == 0){val1 = cp.R0.data;}
            else if (indexofR == 1) {val1 = cp.R1.data;}
            else if (indexofR == 2) {val1 = cp.R2.data;}
            else if (indexofR == 3) {val1 = cp.R3.data;}
            // if LR=0, right rotate
            if (LR==0 && AL==1){
                int y = 0; int z =0; int temp[] = new int [valofCount]; 
                //store the values of val1 array that will be overwritten during the shift
                for (int i=0;i<valofCount;i++){ temp[i] = val1[i]; }
                //shift the val1 array
                for (int i=valofCount; i<=val1.length-1;i++){z = val1[i]; val1[i-valofCount] = z;}
                //add the values to complete the circular roation
                for (int i= val1.length-valofCount; i<val1.length;i++){val1[i] = temp[y]; y++;}
                if(indexofR == 0)    cp.R0.data = val1;
		else if(indexofR==1) cp.R1.data = val1;
		else if(indexofR==2) cp.R2.data = val1;
		else if(indexofR==3) cp.R3.data = val1;
            } // end right rotate
            // if LR=0, left rotate
            else if (LR==1 && AL==1){
                int y = 0; int z =0; int temp[] = new int [valofCount]; 
                //store the values of val1 array that will be overwritten during the shift
                for (int i=val1.length-valofCount;i<val1.length;i++){temp[y] = val1[i]; y++;}
                //shift the val1 array
                for (int i=val1.length-valofCount-1; i>=0;i--){ z = val1[i]; val1[i+valofCount] = z;}
                //add the values to complete the circular roation
                for (int i=0; i<valofCount;i++){val1[i] = temp[i]; } 
                if(indexofR == 0)    cp.R0.data = val1;
		else if(indexofR==1) cp.R1.data = val1;
		else if(indexofR==2) cp.R2.data = val1;
		else if(indexofR==3) cp.R3.data = val1;
            } // end of left shift
        } // end RRC
