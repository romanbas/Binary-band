import java.util.Vector;

public class Cache {
	Vector<CacheObject> cache = new Vector<CacheObject>(16);//built cache as a vector first in first out
	public int[] writeToCacheFromMemory(int Address[]){//fetch the value inside the memory into cache when cpu asked and cache missed, address depends on MBR'S CONTAIN
		//check if it is full and first in first out
		if(cache.size()==16){
			//check dirty bit
			if(cache.get(0).dirtbit == 1){
				readFromCacheToMP(cache.get(0));
			}
			cache.removeElementAt(0);
	}
		int [] tempAddress = new int[12];
		for(int i = 0; i < Address.length;i++){
			tempAddress[i] = Address[i];
			}
			tempAddress[0] = 0;
			tempAddress[1] = 0;
		CacheObject cacheobject = new CacheObject();
		for(int i = 2, j = 0; i < Address.length; i++){
			cacheobject.tag[j] = Address[i];
			j++;
		}
		cacheobject.offset[0] = Address[0];
		cacheobject.offset[1] = Address[1];
		//System.out.println("offset1"+cacheobject.offset[1]+Address[1]+" "+"offset0"+cacheobject.offset[0]+Address[0]);
		cacheobject.valid = 1;
		cacheobject.Value0 = SimpleMemory.memory[getdecimalvalue(tempAddress)];
		cacheobject.Value1 = SimpleMemory.memory[getdecimalvalue(tempAddress)+1];
		cacheobject.Value2 = SimpleMemory.memory[getdecimalvalue(tempAddress)+2];
		cacheobject.Value3 = SimpleMemory.memory[getdecimalvalue(tempAddress)+3];
		cache.add(cacheobject);
		int offset = cacheobject.offset[0]+cacheobject.offset[1]*2;
		//System.out.println(offset);
		int[] newValue = new int[16];
		if(offset == 0){
			newValue = cacheobject.Value0;
		}
		else if(offset == 1){
			newValue = cacheobject.Value1;
		}
		else if(offset == 2){
			newValue = cacheobject.Value2;
		}
		else if(offset == 3){
			newValue = cacheobject.Value3;
		}
		
		System.out.println("writeToCacheFromMemory value");
		for(int i = 0; i<newValue.length;i++)
		System.out.print(newValue[i]);
		System.out.println();
		return newValue;
	}
	
	//when dirtybit is equal to one and that cache line need to be delete from cache, we need store the cache line write back to the memory
	public void readFromCacheToMP(CacheObject cacheobject){
		int Address[] = new int[12];
		for(int i = 0; i< cacheobject.tag.length; i++){
			Address[i+2] = cacheobject.tag[i];
		}
		Address[0] = 0;
		Address[1] = 0;
		int address = getdecimalvalue(Address);
		SimpleMemory.memory[address] = cacheobject.Value0;
		SimpleMemory.memory[address+1] = cacheobject.Value1;
		SimpleMemory.memory[address+2] = cacheobject.Value2;
		SimpleMemory.memory[address+3] = cacheobject.Value3;
}
	
	public int[] writeToCacheFromCPU(int address, int []data){//need test have a recursive
		CacheObject cacheobject = new CacheObject();
		int [] Address = new int[12];
		int[] tempTag = new int[10];
		Address = getBinaryValue(address);
		int offset = Address[0]+Address[1]*2;
		for(int i = 0; i < tempTag.length; i++){
			tempTag[i] = Address[i+2];
			}
		for(int i=0; i < cache.size(); i++){//hit
			cacheobject = cache.get(i);
			if(getdecimalvalue(cacheobject.tag) == getdecimalvalue(tempTag)){//hit
				cacheobject.dirtbit=1;
				if(offset == 0){
					cacheobject.Value0 = data;
					System.out.println("value0");
					return cacheobject.Value0;
				}
				else if(offset == 1){
					cacheobject.Value1 = data;
					System.out.println("value1");
					return cacheobject.Value1;
				}
				else if(offset == 2){
					cacheobject.Value2 = data;
					System.out.println("value2");
					for(int j = 0; j < cacheobject.Value2.length; j++){
						System.out.println(cacheobject.Value2[j]);
					}
					return cacheobject.Value2;
				}
				else if(offset == 3){
					cacheobject.Value3 = data;
					System.out.println("value3");
					return cacheobject.Value3;
				}
			}
		}
		writeToCacheFromMemory(Address);
		writeToCacheFromCPU(address,data);
		return data;
	}
	
	//get the Address from MBR
	public int[] readFromCacheToCPU(int Address[]){//judge miss or hit
		CacheObject cacheobject = new CacheObject();
		int offset = Address[0]+Address[1]*2;
		int[] tempTag = new int[10];
		for(int i = 0; i < tempTag.length; i++){
			tempTag[i] = Address[i+2];
			}
		for(int i=0; i < cache.size(); i++){//hit
			cacheobject = cache.get(i);
			if(getdecimalvalue(cacheobject.tag) == getdecimalvalue(tempTag)){//hit
				System.out.println("Hit");
				if(offset == 0){
					return cacheobject.Value0;
				}
				else if(offset == 1){
					return cacheobject.Value1;
				}
				else if(offset == 2){
					return cacheobject.Value2;
				}
				else if(offset == 3){
					return cacheobject.Value3;
				}
			}
		}
		//miss
		System.out.println("Miss");
		return writeToCacheFromMemory(Address);
	}
	
	public int[] getBinaryValue(int data){//convert decimal value to binary
		int binary[] = new int[12];
	     int index = 0;
	     while(data > 0){
	       binary[index++] = data%2;
	       data = data/2;
	     }
		return binary;
		}
	
	public int getdecimalvalue(int[] data){//convert binary value to decimal
		int decimaldata = 0;
		for(int i = 0; i < data.length;i++){
			decimaldata += data[i]*(Math.pow(2, i));
		}
		return decimaldata;
	}
}
